package com.ssafy.nhdream.common.nhdc;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.3.
 */
@SuppressWarnings("rawtypes")
public class NHDCContract extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200330a3803806200330a833981810160405281019062000037919062000291565b6040518060400160405280600781526020017f4e48546f6b656e000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4e484443000000000000000000000000000000000000000000000000000000008152508160039081620000b491906200053d565b508060049081620000c691906200053d565b505050620000e9620000dd6200015960201b60201c565b6200016160201b60201c565b60006006819055506000600781905550600060088190555060006009819055506000600a8190555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000624565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000259826200022c565b9050919050565b6200026b816200024c565b81146200027757600080fd5b50565b6000815190506200028b8162000260565b92915050565b600060208284031215620002aa57620002a962000227565b5b6000620002ba848285016200027a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034557607f821691505b6020821081036200035b576200035a620002fd565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003c57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000386565b620003d1868362000386565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200041e620004186200041284620003e9565b620003f3565b620003e9565b9050919050565b6000819050919050565b6200043a83620003fd565b62000452620004498262000425565b84845462000393565b825550505050565b600090565b620004696200045a565b620004768184846200042f565b505050565b5b818110156200049e57620004926000826200045f565b6001810190506200047c565b5050565b601f821115620004ed57620004b78162000361565b620004c28462000376565b81016020851015620004d2578190505b620004ea620004e18562000376565b8301826200047b565b50505b505050565b600082821c905092915050565b60006200051260001984600802620004f2565b1980831691505092915050565b60006200052d8383620004ff565b9150826002028217905092915050565b6200054882620002c3565b67ffffffffffffffff811115620005645762000563620002ce565b5b6200057082546200032c565b6200057d828285620004a2565b600060209050601f831160018114620005b55760008415620005a0578287015190505b620005ac85826200051f565b8655506200061c565b601f198416620005c58662000361565b60005b82811015620005ef57848901518255600182019150602085019450602081019050620005c8565b868310156200060f57848901516200060b601f891682620004ff565b8355505b6001600288020188555050505b505050505050565b612cd680620006346000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80638c0243e71161011a578063aaf50292116100ad578063d0047acf1161007c578063d0047acf146105b5578063d89135cd146105d1578063dd62ed3e146105ef578063e5919a4f1461061f578063f2fde38b1461064f57610206565b8063aaf5029214610541578063ad6d126d1461055d578063b99584e414610579578063c0c4a6d41461059757610206565b8063a1ff31c8116100e9578063a1ff31c8146104a5578063a2309ff8146104c3578063a457c2d7146104e1578063a9059cbb1461051157610206565b80638c0243e71461042f5780638da5cb5b1461044d57806395d89b411461046b5780639e0921ff1461048957610206565b806331d388061161019d57806342966c681161016c57806342966c68146103a15780635aa7dc24146103bd57806370a08231146103d9578063715018a61461040957806379cc67901461041357610206565b806331d388061461031b5780633302b2171461033757806339509351146103555780634285d5ae1461038557610206565b8063253f284b116101d9578063253f284b146102a757806326772c29146102c55780632caf94ce146102e1578063313ce567146102fd57610206565b806306fdde031461020b578063095ea7b31461022957806318160ddd1461025957806323b872dd14610277575b600080fd5b61021361066b565b604051610220919061206f565b60405180910390f35b610243600480360381019061023e919061212a565b6106fd565b6040516102509190612185565b60405180910390f35b610261610720565b60405161026e91906121af565b60405180910390f35b610291600480360381019061028c91906121ca565b61072a565b60405161029e9190612185565b60405180910390f35b6102af6107e4565b6040516102bc919061222c565b60405180910390f35b6102df60048036038101906102da9190612283565b61080a565b005b6102fb60048036038101906102f691906122d6565b610903565b005b61030561097e565b6040516103129190612332565b60405180910390f35b6103356004803603810190610330919061234d565b610983565b005b61033f610a43565b60405161034c91906121af565b60405180910390f35b61036f600480360381019061036a919061212a565b610a75565b60405161037c9190612185565b60405180910390f35b61039f600480360381019061039a91906122d6565b610aac565b005b6103bb60048036038101906103b6919061237a565b610c3f565b005b6103d760048036038101906103d29190612283565b610c53565b005b6103f360048036038101906103ee919061234d565b610ddc565b60405161040091906121af565b60405180910390f35b610411610e24565b005b61042d6004803603810190610428919061212a565b610eac565b005b610437610f27565b60405161044491906121af565b60405180910390f35b610455610f31565b604051610462919061222c565b60405180910390f35b610473610f5b565b604051610480919061206f565b60405180910390f35b6104a3600480360381019061049e919061234d565b610fed565b005b6104ad6110c4565b6040516104ba91906121af565b60405180910390f35b6104cb6110f6565b6040516104d891906121af565b60405180910390f35b6104fb60048036038101906104f6919061212a565b611100565b6040516105089190612185565b60405180910390f35b61052b6004803603810190610526919061212a565b611177565b6040516105389190612185565b60405180910390f35b61055b6004803603810190610556919061234d565b61119a565b005b610577600480360381019061057291906122d6565b611271565b005b610581611419565b60405161058e919061222c565b60405180910390f35b61059f61143f565b6040516105ac91906121af565b60405180910390f35b6105cf60048036038101906105ca9190612283565b611449565b005b6105d9611542565b6040516105e691906121af565b60405180910390f35b610609600480360381019061060491906123a7565b61154c565b60405161061691906121af565b60405180910390f35b6106396004803603810190610634919061234d565b6115d3565b6040516106469190612185565b60405180910390f35b6106696004803603810190610664919061234d565b6115f3565b005b60606003805461067a90612416565b80601f01602080910402602001604051908101604052809291908181526020018280546106a690612416565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b5050505050905090565b6000806107086116ea565b90506107158185856116f2565b600191505092915050565b6000600254905090565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806107b657503373ffffffffffffffffffffffffffffffffffffffff1661079e610f31565b73ffffffffffffffffffffffffffffffffffffffff16145b156107cf576107c68484846118bb565b600190506107dd565b6107da848484611b31565b90505b9392505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108126116ea565b73ffffffffffffffffffffffffffffffffffffffff16610830610f31565b73ffffffffffffffffffffffffffffffffffffffff1614610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90612493565b60405180910390fd5b6108908383610eac565b81600760008282546108a291906124e2565b925050819055508063ffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff9456e24470a717eda4995a1149f46e243fc7835b18040cf004b810e30ccee8b846040516108f691906121af565b60405180910390a3505050565b61090c82610c3f565b816007600082825461091e91906124e2565b925050819055508063ffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff9456e24470a717eda4995a1149f46e243fc7835b18040cf004b810e30ccee8b8460405161097291906121af565b60405180910390a35050565b600090565b61098b6116ea565b73ffffffffffffffffffffffffffffffffffffffff166109a9610f31565b73ffffffffffffffffffffffffffffffffffffffff16146109ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f690612493565b60405180910390fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610a70600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ddc565b905090565b600080610a806116ea565b9050610aa1818585610a92858961154c565b610a9c91906124e2565b6116f2565b600191505092915050565b610ab46116ea565b73ffffffffffffffffffffffffffffffffffffffff16610ad2610f31565b73ffffffffffffffffffffffffffffffffffffffff1614610b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1f90612493565b60405180910390fd5b610b54600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b60565b8160066000828254610b6691906124e2565b925050819055508160086000828254610b7f91906124e2565b925050819055508063ffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c7e09fa4615060d4b3303502bd5d8f0f030010aa720da4b454ad3672e5645f484604051610bf591906121af565b60405180910390a38063ffffffff167f0d11f81a942895e2bae55a08749787e71cf52f3b1fe794082c0b89e7efd56c9d83604051610c3391906121af565b60405180910390a25050565b610c50610c4a6116ea565b82611cb6565b50565b610c5b6116ea565b73ffffffffffffffffffffffffffffffffffffffff16610c79610f31565b73ffffffffffffffffffffffffffffffffffffffff1614610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690612493565b60405180910390fd5b81610cfb600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ddc565b1015610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3390612588565b60405180910390fd5b610d69600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846118bb565b8160096000828254610d7b91906124e2565b925050819055508063ffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6056e62b9b19f094e606330060f52db6efd20be8912876fdcb230f4f466c157684604051610dcf91906121af565b60405180910390a3505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e2c6116ea565b73ffffffffffffffffffffffffffffffffffffffff16610e4a610f31565b73ffffffffffffffffffffffffffffffffffffffff1614610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9790612493565b60405180910390fd5b610eaa6000611e83565b565b6000610ebf83610eba6116ea565b61154c565b905081811015610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9061261a565b60405180910390fd5b610f1883610f106116ea565b8484036116f2565b610f228383611cb6565b505050565b6000600954905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610f6a90612416565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9690612416565b8015610fe35780601f10610fb857610100808354040283529160200191610fe3565b820191906000526020600020905b815481529060010190602001808311610fc657829003601f168201915b5050505050905090565b610ff56116ea565b73ffffffffffffffffffffffffffffffffffffffff16611013610f31565b73ffffffffffffffffffffffffffffffffffffffff1614611069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106090612493565b60405180910390fd5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006110f1600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ddc565b905090565b6000600654905090565b60008061110b6116ea565b90506000611119828661154c565b90508381101561115e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611155906126ac565b60405180910390fd5b61116b82868684036116f2565b60019250505092915050565b6000806111826116ea565b905061118f8185856118bb565b600191505092915050565b6111a26116ea565b73ffffffffffffffffffffffffffffffffffffffff166111c0610f31565b73ffffffffffffffffffffffffffffffffffffffff1614611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120d90612493565b60405180910390fd5b6001600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990612718565b60405180910390fd5b61132e600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b60565b816006600082825461134091906124e2565b92505081905550816008600082825461135991906124e2565b925050819055508063ffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c7e09fa4615060d4b3303502bd5d8f0f030010aa720da4b454ad3672e5645f4846040516113cf91906121af565b60405180910390a38063ffffffff167f0d11f81a942895e2bae55a08749787e71cf52f3b1fe794082c0b89e7efd56c9d8360405161140d91906121af565b60405180910390a25050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600854905090565b6114516116ea565b73ffffffffffffffffffffffffffffffffffffffff1661146f610f31565b73ffffffffffffffffffffffffffffffffffffffff16146114c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bc90612493565b60405180910390fd5b6114cf8383611b60565b81600660008282546114e191906124e2565b925050819055508063ffffffff168373ffffffffffffffffffffffffffffffffffffffff167f5c7e09fa4615060d4b3303502bd5d8f0f030010aa720da4b454ad3672e5645f48460405161153591906121af565b60405180910390a3505050565b6000600754905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600d6020528060005260406000206000915054906101000a900460ff1681565b6115fb6116ea565b73ffffffffffffffffffffffffffffffffffffffff16611619610f31565b73ffffffffffffffffffffffffffffffffffffffff161461166f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166690612493565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d5906127aa565b60405180910390fd5b6116e781611e83565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611761576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117589061283c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c7906128ce565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118ae91906121af565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192190612960565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611999576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611990906129f2565b60405180910390fd5b6119a4838383611f49565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2190612a84565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b1891906121af565b60405180910390a3611b2b848484611f4e565b50505050565b600080611b3c6116ea565b9050611b49858285611f53565b611b548585856118bb565b60019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc690612af0565b60405180910390fd5b611bdb60008383611f49565b8060026000828254611bed91906124e2565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611c9e91906121af565b60405180910390a3611cb260008383611f4e565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1c90612b82565b60405180910390fd5b611d3182600083611f49565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dae90612c14565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e6a91906121af565b60405180910390a3611e7e83600084611f4e565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b6000611f5f848461154c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611fd95781811015611fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc290612c80565b60405180910390fd5b611fd884848484036116f2565b5b50505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612019578082015181840152602081019050611ffe565b60008484015250505050565b6000601f19601f8301169050919050565b600061204182611fdf565b61204b8185611fea565b935061205b818560208601611ffb565b61206481612025565b840191505092915050565b600060208201905081810360008301526120898184612036565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120c182612096565b9050919050565b6120d1816120b6565b81146120dc57600080fd5b50565b6000813590506120ee816120c8565b92915050565b6000819050919050565b612107816120f4565b811461211257600080fd5b50565b600081359050612124816120fe565b92915050565b6000806040838503121561214157612140612091565b5b600061214f858286016120df565b925050602061216085828601612115565b9150509250929050565b60008115159050919050565b61217f8161216a565b82525050565b600060208201905061219a6000830184612176565b92915050565b6121a9816120f4565b82525050565b60006020820190506121c460008301846121a0565b92915050565b6000806000606084860312156121e3576121e2612091565b5b60006121f1868287016120df565b9350506020612202868287016120df565b925050604061221386828701612115565b9150509250925092565b612226816120b6565b82525050565b6000602082019050612241600083018461221d565b92915050565b600063ffffffff82169050919050565b61226081612247565b811461226b57600080fd5b50565b60008135905061227d81612257565b92915050565b60008060006060848603121561229c5761229b612091565b5b60006122aa868287016120df565b93505060206122bb86828701612115565b92505060406122cc8682870161226e565b9150509250925092565b600080604083850312156122ed576122ec612091565b5b60006122fb85828601612115565b925050602061230c8582860161226e565b9150509250929050565b600060ff82169050919050565b61232c81612316565b82525050565b60006020820190506123476000830184612323565b92915050565b60006020828403121561236357612362612091565b5b6000612371848285016120df565b91505092915050565b6000602082840312156123905761238f612091565b5b600061239e84828501612115565b91505092915050565b600080604083850312156123be576123bd612091565b5b60006123cc858286016120df565b92505060206123dd858286016120df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061242e57607f821691505b602082108103612441576124406123e7565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061247d602083611fea565b915061248882612447565b602082019050919050565b600060208201905081810360008301526124ac81612470565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124ed826120f4565b91506124f8836120f4565b92508282019050808211156125105761250f6124b3565b5b92915050565b7f496e73756666696369656e742062616c616e636520696e20696e74657265737460008201527f2077616c6c657400000000000000000000000000000000000000000000000000602082015250565b6000612572602783611fea565b915061257d82612516565b604082019050919050565b600060208201905081810360008301526125a181612565565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000612604602483611fea565b915061260f826125a8565b604082019050919050565b60006020820190508181036000830152612633816125f7565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612696602583611fea565b91506126a18261263a565b604082019050919050565b600060208201905081810360008301526126c581612689565b9050919050565b7f4c6f616e20636f6e74726163742061646472657373206e6f7420736574000000600082015250565b6000612702601d83611fea565b915061270d826126cc565b602082019050919050565b60006020820190508181036000830152612731816126f5565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612794602683611fea565b915061279f82612738565b604082019050919050565b600060208201905081810360008301526127c381612787565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612826602483611fea565b9150612831826127ca565b604082019050919050565b6000602082019050818103600083015261285581612819565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006128b8602283611fea565b91506128c38261285c565b604082019050919050565b600060208201905081810360008301526128e7816128ab565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061294a602583611fea565b9150612955826128ee565b604082019050919050565b600060208201905081810360008301526129798161293d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006129dc602383611fea565b91506129e782612980565b604082019050919050565b60006020820190508181036000830152612a0b816129cf565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612a6e602683611fea565b9150612a7982612a12565b604082019050919050565b60006020820190508181036000830152612a9d81612a61565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612ada601f83611fea565b9150612ae582612aa4565b602082019050919050565b60006020820190508181036000830152612b0981612acd565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b6c602183611fea565b9150612b7782612b10565b604082019050919050565b60006020820190508181036000830152612b9b81612b5f565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bfe602283611fea565b9150612c0982612ba2565b604082019050919050565b60006020820190508181036000830152612c2d81612bf1565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612c6a601d83611fea565b9150612c7582612c34565b602082019050919050565b60006020820190508181036000830152612c9981612c5d565b905091905056fea2646970667358221220976a3a9af557fe9f62889e95da3d5ff957fa98d55634b8cfae870ab69241d57d64736f6c63430008130033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNFROM = "burnFrom";

    public static final String FUNC_BURNFROMWITHTIME = "burnFromWithTime";

    public static final String FUNC_BURNWITHTIME = "burnWithTime";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_DELETETRUSTEDCONTRACT = "deleteTrustedContract";

    public static final String FUNC_GETINTERESTWALLETBALANCE = "getInterestWalletBalance";

    public static final String FUNC_GETLOANCONTRACTBALANCE = "getLoanContractBalance";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_INTERESTWALLET = "interestWallet";

    public static final String FUNC_LOANCONTRACT = "loanContract";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTTOINTERESTWALLET = "mintToInterestWallet";

    public static final String FUNC_MINTTOLOANCONTRACT = "mintToLoanContract";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETLOANCONTRACT = "setLoanContract";

    public static final String FUNC_SETTRUSTEDCONTRACT = "setTrustedContract";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALBURNED = "totalBurned";

    public static final String FUNC_TOTALINTERESTMINTED = "totalInterestMinted";

    public static final String FUNC_TOTALINTERESTPAID = "totalInterestPaid";

    public static final String FUNC_TOTALMINTED = "totalMinted";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFERFROMINTERESTWALLET = "transferFromInterestWallet";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRUSTEDCONTRACTS = "trustedContracts";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BURNED_EVENT = new Event("Burned", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>(true) {}));
    ;

    public static final Event INTERESTMINTED_EVENT = new Event("InterestMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint32>(true) {}));
    ;

    public static final Event INTERESTTRANSFERRED_EVENT = new Event("InterestTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>(true) {}));
    ;

    public static final Event LOANMINTED_EVENT = new Event("LoanMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint32>(true) {}));
    ;

    public static final Event MINTED_EVENT = new Event("Minted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected NHDCContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NHDCContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NHDCContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NHDCContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<BurnedEventResponse> getBurnedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BURNED_EVENT, transactionReceipt);
        ArrayList<BurnedEventResponse> responses = new ArrayList<BurnedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnedEventResponse typedResponse = new BurnedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BurnedEventResponse getBurnedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BURNED_EVENT, log);
        BurnedEventResponse typedResponse = new BurnedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BurnedEventResponse> burnedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBurnedEventFromLog(log));
    }

    public Flowable<BurnedEventResponse> burnedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURNED_EVENT));
        return burnedEventFlowable(filter);
    }

    public static List<InterestMintedEventResponse> getInterestMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INTERESTMINTED_EVENT, transactionReceipt);
        ArrayList<InterestMintedEventResponse> responses = new ArrayList<InterestMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InterestMintedEventResponse typedResponse = new InterestMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InterestMintedEventResponse getInterestMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INTERESTMINTED_EVENT, log);
        InterestMintedEventResponse typedResponse = new InterestMintedEventResponse();
        typedResponse.log = log;
        typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InterestMintedEventResponse> interestMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInterestMintedEventFromLog(log));
    }

    public Flowable<InterestMintedEventResponse> interestMintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock, BigInteger time) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INTERESTMINTED_EVENT));
//        filter.addOptionalTopics(null,null,"0x"+time.toString(16));
        System.out.println("LocalDate.now() = " + LocalDate.now());
        System.out.println("time = " + time);
        return interestMintedEventFlowable(filter);
    }

    public static List<InterestTransferredEventResponse> getInterestTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INTERESTTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<InterestTransferredEventResponse> responses = new ArrayList<InterestTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InterestTransferredEventResponse typedResponse = new InterestTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InterestTransferredEventResponse getInterestTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INTERESTTRANSFERRED_EVENT, log);
        InterestTransferredEventResponse typedResponse = new InterestTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InterestTransferredEventResponse> interestTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInterestTransferredEventFromLog(log));
    }

    public Flowable<InterestTransferredEventResponse> interestTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INTERESTTRANSFERRED_EVENT));
        return interestTransferredEventFlowable(filter);
    }

    public static List<LoanMintedEventResponse> getLoanMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LOANMINTED_EVENT, transactionReceipt);
        ArrayList<LoanMintedEventResponse> responses = new ArrayList<LoanMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LoanMintedEventResponse typedResponse = new LoanMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static LoanMintedEventResponse getLoanMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(LOANMINTED_EVENT, log);
        LoanMintedEventResponse typedResponse = new LoanMintedEventResponse();
        typedResponse.log = log;
        typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<LoanMintedEventResponse> loanMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getLoanMintedEventFromLog(log));
    }

    public Flowable<LoanMintedEventResponse> loanMintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOANMINTED_EVENT));
        return loanMintedEventFlowable(filter);
    }

    public static List<MintedEventResponse> getMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINTED_EVENT, transactionReceipt);
        ArrayList<MintedEventResponse> responses = new ArrayList<MintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintedEventResponse typedResponse = new MintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MintedEventResponse getMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MINTED_EVENT, log);
        MintedEventResponse typedResponse = new MintedEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MintedEventResponse> mintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMintedEventFromLog(log));
    }

    public Flowable<MintedEventResponse> mintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTED_EVENT));
        return mintedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger amount) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnFrom(String account, BigInteger amount) {
        final Function function = new Function(
                FUNC_BURNFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnFromWithTime(String account, BigInteger amount, BigInteger time) {
        final Function function = new Function(
                FUNC_BURNFROMWITHTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint32(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnWithTime(BigInteger amount, BigInteger time) {
        final Function function = new Function(
                FUNC_BURNWITHTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint32(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final Function function = new Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteTrustedContract(String _contract) {
        final Function function = new Function(
                FUNC_DELETETRUSTEDCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getInterestWalletBalance() {
        final Function function = new Function(FUNC_GETINTERESTWALLETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getLoanContractBalance() {
        final Function function = new Function(FUNC_GETLOANCONTRACTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final Function function = new Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> interestWallet() {
        final Function function = new Function(FUNC_INTERESTWALLET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> loanContract() {
        final Function function = new Function(FUNC_LOANCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger amount, BigInteger time) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint32(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintToInterestWallet(BigInteger amount, BigInteger time) {
        final Function function = new Function(
                FUNC_MINTTOINTERESTWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint32(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintToLoanContract(BigInteger amount, BigInteger time) {
        final Function function = new Function(
                FUNC_MINTTOLOANCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint32(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLoanContract(String _loanContractAddress) {
        final Function function = new Function(
                FUNC_SETLOANCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _loanContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTrustedContract(String _contract) {
        final Function function = new Function(
                FUNC_SETTRUSTEDCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalBurned() {
        final Function function = new Function(FUNC_TOTALBURNED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalInterestMinted() {
        final Function function = new Function(FUNC_TOTALINTERESTMINTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalInterestPaid() {
        final Function function = new Function(FUNC_TOTALINTERESTPAID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalMinted() {
        final Function function = new Function(FUNC_TOTALMINTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFromInterestWallet(String recipient, BigInteger amount, BigInteger time) {
        final Function function = new Function(
                FUNC_TRANSFERFROMINTERESTWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint32(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> trustedContracts(String param0) {
        final Function function = new Function(FUNC_TRUSTEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static NHDCContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NHDCContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NHDCContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NHDCContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NHDCContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NHDCContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NHDCContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NHDCContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NHDCContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _interestWallet) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _interestWallet)));
        return deployRemoteCall(NHDCContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<NHDCContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _interestWallet) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _interestWallet)));
        return deployRemoteCall(NHDCContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NHDCContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _interestWallet) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _interestWallet)));
        return deployRemoteCall(NHDCContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NHDCContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _interestWallet) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _interestWallet)));
        return deployRemoteCall(NHDCContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    public static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class BurnedEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger time;

        public BigInteger amount;
    }

    public static class InterestMintedEventResponse extends BaseEventResponse {
        public BigInteger time;

        public BigInteger amount;
    }

    public static class InterestTransferredEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger time;

        public BigInteger amount;
    }

    public static class LoanMintedEventResponse extends BaseEventResponse {
        public BigInteger time;

        public BigInteger amount;
    }

    public static class MintedEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger time;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
